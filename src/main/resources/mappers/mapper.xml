<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.server.testinterface.TestMapper">

    <select id="testConnection" resultType="int">
        SELECT COUNT(*) FROM create_news
    </select>
<!--list<string>인데 여기는 맞춰줄 필요없음?-->
    <select id="getDescriptions" resultType="String">
        SELECT DESCRIPTION FROM create_news
    </select>

<!--    회원가입-->
<!--    parametertype은 dto 의 변수 이름이 db와 같다면 굳이 안넣어도됨 -->
    <insert id='SignUp'>
        INSERT INTO MEMBER (MEMBER_NUM,ID, PASSWORD, NAME, EMAIL, AGE, GENDER,SIGNUP_AT,MAIN_INTEREST,SUB_INTEREST)
        VALUES (SEQ_MEMBER_NUM.NEXTVAL, #{id}, #{password}, #{name}, #{email}, #{age}, #{gender}, SYSTIMESTAMP,#{mainInterest},#{subInterest})
</insert>


<!--로그인-->
<!--    dto에 있는 변수명과 db의 변수명이 같아야함-->
    <select id="SignIn" resultType="com.example.server.dto.Member">
        SELECT MEMBER_NUM as memberNum ,id,password,name,email,age,gender,MAIN_INTEREST as mainInterest,SUB_INTEREST as subInterest FROM MEMBER WHERE id = #{id} AND password = #{password}
    </select>


    <!--이메일 중복체크-->
    <select id="checkEmailExists" resultType="int">
-- 이메일이 같다면  count(*)가 1이상이면 중복이라는 뜻
        SELECT COUNT(*) FROM member WHERE email = #{email}
    </select>

<!--   개인정보 수정하-->
    <update id="updateMember" parameterType="com.example.server.dto.Member">
        UPDATE MEMBER SET MAIN_INTEREST  = #{mainInterest}, SUB_INTEREST = #{subInterest} WHERE MEMBER_NUM = #{memberNum}
    </update>

<!--    회원탈퇴-->
<!--    이메일이 테이블에 존재할 때 비밀번호를 확인하는 로직을 작성해주세요-->
    <select id="checkEmailAndPassword" resultType="int">
        SELECT COUNT(*) FROM MEMBER WHERE email = #{email} AND password = #{password}
    </select>
    <delete id="deleteMember" parameterType="com.example.server.dto.Member">
        DELETE FROM MEMBER WHERE email = #{email} AND password = #{password}
    </delete>




    <!-- 뉴스기사 -->
    <resultMap id="createNewsResultMap" type="com.example.server.dto.CreateNews">
        <result property="createNewsNum" column="CREATE_NEWS_NUM"/>
        <result property="category" column="CATEGORY"/>
        <result property="createNewsDate" column="CREATE_NEWS_DATE"/>
        <result property="title" column="TITLE"/>
        <result property="description" column="DESCRIPTION"/>
        <result property="joind" column="JOIND"/>
        <result property="likeCount" column="LIKE_COUNT"/>
        <result property="dislikeCount" column="DISLIKE_COUNT"/>
        <result property="pubDate" column="PUB_DATE"/>
        <result property="keyword" column="KEYWORD"/>
        <result property="clusterNum" column="CLUSTER_NUM"/>
        <result property="literaryStyle" column="LITERARY_STYLE"/>
        <result property="thumbnailPrompt" column="THUMBNAIL_PROMPT"/>
        <result property="thumbnailData" column="THUMBNAIL_DATA"/>
    </resultMap>

    <select id="selectCreateNewsList" resultMap="createNewsResultMap">
        SELECT *
        FROM create_news
    </select>

    <select id="selectCreateNewsDetail" resultMap="createNewsResultMap">
        SELECT
        cn.CREATE_NEWS_NUM,
        cn.CATEGORY,
        cn.CREATE_NEWS_DATE,
        cn.TITLE,
        cn.DESCRIPTION,
        cn.JOIND,
        cn.LIKE_COUNT,
        cn.DISLIKE_COUNT,
        cn.PUB_DATE,
        cn.KEYWORD,
        cn.CLUSTER_NUM,
        cn.LITERARY_STYLE,
        cn.THUMBNAIL_PROMPT,
        th.THUMBNAIL_DATA
        FROM CREATE_NEWS cn
        LEFT JOIN THUMBNAIL th ON cn.CREATE_NEWS_NUM = th.CREATE_NEWS_NUM
        WHERE cn.CREATE_NEWS_NUM = #{id}
    </select>

    <select id="selectCreateNewsListPaginated" resultMap="createNewsResultMap">
        SELECT *
            FROM (
            SELECT
                cn.CREATE_NEWS_NUM,
                cn.CATEGORY,
                cn.CREATE_NEWS_DATE,
                cn.TITLE,
                cn.DESCRIPTION,
                cn.JOIND,
                cn.LIKE_COUNT,
                cn.DISLIKE_COUNT,
                cn.PUB_DATE,
                cn.KEYWORD,
                cn.CLUSTER_NUM,
                cn.LITERARY_STYLE,
                cn.THUMBNAIL_PROMPT,
                th.THUMBNAIL_DATA
                FROM CREATE_NEWS cn
                LEFT JOIN THUMBNAIL th ON cn.CREATE_NEWS_NUM = th.CREATE_NEWS_NUM
                ORDER BY cn.CREATE_NEWS_NUM DESC
        )
        OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
    </select>

    <select id="selectTrendNewsList" resultMap="createNewsResultMap">
        SELECT CN.*, T.THUMBNAIL_DATA
        FROM CREATE_NEWS CN
        JOIN (
        SELECT CLUSTER_NUM
        FROM (
        SELECT COUNT(*) AS NEWS_COUNT, CLUSTER_NUM
        FROM CLUSTER_NEWS
        WHERE CLUSTER_NUM IN (
        SELECT DISTINCT CLUSTER_NUM
        FROM CLUSTERS
        WHERE CREATED_AT BETWEEN TRUNC(SYSDATE - 1) AND SYSDATE
        )
        GROUP BY CLUSTER_NUM
        ORDER BY NEWS_COUNT DESC
        )
        WHERE ROWNUM <![CDATA[<=]]> 10
        ) TOP_CLUSTERS ON CN.CLUSTER_NUM = TOP_CLUSTERS.CLUSTER_NUM
        LEFT JOIN THUMBNAIL T ON CN.CREATE_NEWS_NUM = T.CREATE_NEWS_NUM
    </select>

    <select id="countCreateNews" resultType="long">
        SELECT COUNT(*) FROM create_news
    </select>

    <update id="updateCreateNewsJoind">
        UPDATE CREATE_NEWS
        SET JOIND = NVL(JOIND, 0) + 1
        WHERE CREATE_NEWS_NUM = #{id}
    </update>
</mapper>
